<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hextra – Index In PostgreSQL</title>
    <link>http://localhost:1313/0013-postgresql/0022-index-in-pg/</link>
    <description>Recent content in Index In PostgreSQL on Hextra</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 01 Oct 2024 12:18:05 +0800</lastBuildDate>
    
	  <atom:link href="http://localhost:1313/0013-postgresql/0022-index-in-pg/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Hot and Create Index</title>
      <link>http://localhost:1313/0013-postgresql/0022-index-in-pg/hot-and-create-index/</link>
      <pubDate>Tue, 01 Oct 2024 12:18:05 +0800</pubDate>
      
      <guid>http://localhost:1313/0013-postgresql/0022-index-in-pg/hot-and-create-index/</guid>
      <description>
        
        
        &lt;h1&gt;1 概述&lt;/h1&gt;&lt;p&gt;本文介绍 PostgreSQL 中 Heap Only Tuple(HOT) 技术以及创建索引相关的知识，主要包含以下内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HOT 的基本原理&lt;/li&gt;
&lt;li&gt;普通的创建索引 (Create Index) 流程&lt;/li&gt;
&lt;li&gt;同时创建索引 (Create Index Concurrently CIC) 的原理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本文不包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;btree 等索引的具体实现方式&lt;/li&gt;
&lt;li&gt;PostgreSQL 对索引访问方式 (Access Method) 的抽象&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;2 HOT 基础&lt;/h1&gt;&lt;p&gt;简单而言, HOT(Heap Only Tuple) 指没有索引指向的元组，用于消除元组更新引起的索引膨胀，原理如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-001-hot_page.png&#34; alt=&#34;image-20240913221635357&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;元组指向另一个元组：索引指向 line_ptr_1 ，line_ptr_1 指向 tuple_1 ，tuple_1 被更新后成为 tuple_2，此时 tuple_1 指向 tuple_2，而索引指向的 line pointer 没有发生变化。&lt;/li&gt;
&lt;li&gt;line pointer 也可以指向另一个 line pointer：索引指向 line_ptr_3 , line_ptr_3 指向 line_ptr_4 ，line_ptr_4 指向 tuple3&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;显然，HOT 技术具有如下优点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于被更新的元组，无需创建新的索引指针指向新元组&lt;/li&gt;
&lt;li&gt;旧元组可以被“普通操作”删除掉，并不一定需要 vacuum （相当 vacuum 的工作被分给了普通的 dml ）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同时，触发 HOT 链也需要严格的限制：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;该更新不会修改表的索引所引用的任何列，不包括汇总索引&lt;/li&gt;
&lt;li&gt;包含旧行的页面有足够的空闲空间用于存放更新后的行，即，HOT 链不能跨 page&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;2-1 HOT 链的构建&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;2-1-hot-链的构建&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#2-1-hot-%e9%93%be%e7%9a%84%e6%9e%84%e5%bb%ba&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;（一）：表 tbl(x int, y int) 在 x 上有索引，先插入一行  tuple_1=(x=1, y=1) ，结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-002-hot-insert_1.png&#34; alt=&#34;image-20240912110738151&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;（二）：当更新 tuple_1 为 (x=1,y=2) 时， 新增 lp_2, 和 tuple_2 ，但是不会新增索引指针，而是由 tuple_1 的 header 会记录 tuple_2 的位置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-003-hot-insert_2.png&#34; alt=&#34;image-20240912110738151&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;从可见性的角度思考，对于一个快照而言，一个 HOT 链上最多只有一个 tuple 可见。&lt;/p&gt;
&lt;p&gt;所以使用索引扫描时，会先找到 tuple_1 判断 tuple_ 1 是否符合可见性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果 tuple_1 可见，那么立即返回，不在向下搜索。&lt;/li&gt;
&lt;li&gt;如果 tuple_1 不可见，再继续向下搜素。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（三）：再更新 tuple_1 为 tuple3=(x=1, y=3)，结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-004-hot-insert_3.png&#34; alt=&#34;image-20240912110738151&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;2-2 清理&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;2-2-清理&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#2-2-%e6%b8%85%e7%90%86&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;显然如果一个tuple一直被更新，那么其 HOT 链会很长，影响索引搜索的性能，所以需要去清理 HOT 链，清理分为两步，一个是 pruning （修剪），另一个是 defragmentation （碎片整理）&lt;/p&gt;
&lt;p&gt;（四）：pruning （修剪）：等 tuple_1 和 tuple_2 多所有事务都不可见时，则通过修改 line pointers，减少 hot 链的长度。 line pointer 2 可以被其他操作复用，但是 tuple_1 和 tuple_2 占用的空间仍没有被清理。如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-005-hot-prune.png&#34; alt=&#34;image-20240912151435754&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;（五）：defragmentation （碎片整理）：将对应的 tuple 彻底删除，如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-006-hot-defragmentation.png&#34; alt=&#34;006-hot-defragmentation&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;3 Create Index 的流程&lt;/h1&gt;&lt;p&gt;该章节介绍普通的创建索引的大致过程，尤其是缓存一致性和对 HOT 的特殊处理&lt;/p&gt;
&lt;h2&gt;3-1 准备步骤&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;3-1-准备步骤&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#3-1-%e5%87%86%e5%a4%87%e6%ad%a5%e9%aa%a4&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;权限校验：包括&lt;/li&gt;
&lt;li&gt;选择索引名， access method （主要是确认 access method 是否存在）&lt;/li&gt;
&lt;li&gt;加锁：shared lock，阻止写入&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;3-2 创建空索引&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;3-2-创建空索引&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#3-2-%e5%88%9b%e5%bb%ba%e7%a9%ba%e7%b4%a2%e5%bc%95&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;创建 heap &lt;code&gt;heap_create&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;build relcache&lt;/li&gt;
&lt;li&gt;创建文件 &lt;code&gt;smgrcreate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;记录依赖&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;向 &lt;code&gt;pg_class&lt;/code&gt; , &lt;code&gt;pg_index&lt;/code&gt; , &lt;code&gt;pg_attribute&lt;/code&gt;  中写入对应的记录&lt;/li&gt;
&lt;li&gt;注册对应表的缓存无效信息，以便在事务结束时发送 &lt;code&gt;CacheInvalidateRelcache&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;3-3 调用对应的 index access method 创建索引&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;3-3-调用对应的-index-access-method-创建索引&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#3-3-%e8%b0%83%e7%94%a8%e5%af%b9%e5%ba%94%e7%9a%84-index-access-method-%e5%88%9b%e5%bb%ba%e7%b4%a2%e5%bc%95&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这里和 HOT 关系较大，需要简单展开：&lt;/p&gt;
&lt;p&gt;在 index access method 内部，会使用回调函数 &lt;code&gt;heapam_index_build_range_scan&lt;/code&gt; 来扫描 heap，以确定有哪些 tuple 需要加入到索引中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;该扫描使用的快照为 &lt;code&gt;SnapshotAny&lt;/code&gt; ，即所有元组都需要被处理。&lt;/li&gt;
&lt;li&gt;每当扫描到一个元组时，需要像 &lt;code&gt;vacuum&lt;/code&gt; 一样判断该元组的状态，包括：
&lt;ol&gt;
&lt;li&gt;对所有事务都不可见 (&lt;code&gt;HEAPTUPLE_DEAD&lt;/code&gt;) ，那么显然不需要对他创建索引&lt;/li&gt;
&lt;li&gt;如果所有事务都可见 (&lt;code&gt;HEAPTUPLE_LIVE&lt;/code&gt;)，那么显然需要对他创建索引&lt;/li&gt;
&lt;li&gt;如果一些事务可见：
&lt;ol&gt;
&lt;li&gt;(&lt;code&gt;HEAPTUPLE_RECENTLY_DEAD&lt;/code&gt;) ，最近被删除，但是有些事务仍然可以看到 （重点处理）：&lt;/li&gt;
&lt;li&gt;(&lt;code&gt;INSERT_IN_PROGRESS&lt;/code&gt;) 和 (&lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt;) ，正在被插入、删除 ：考虑到大部分情况下 &lt;code&gt;create index&lt;/code&gt; 语句不会在事务块中执行，这里跳过。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;3-3-1 如何处理 &lt;code&gt;HEAPTUPLE_RECENTLY_DEAD&lt;/code&gt;&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;3-3-1-如何处理-heaptuple_recently_dead&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#3-3-1-%e5%a6%82%e4%bd%95%e5%a4%84%e7%90%86-heaptuple_recently_dead&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;3-3-1-1 非 HOT&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;3-3-1-1-非-hot&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#3-3-1-1-%e9%9d%9e-hot&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;说明该 tuple 被删除了，但是有一些事务仍然对其可见，那么也需要加入到索引中。否则这些事务后续通过当前创建的索引就无法找到该元组。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-007-index-non-hot-dead.png&#34; alt=&#34;007-index-non-hot-dead&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;注意：在判断一个表有哪些索引时，使用快照是“最新的快照”，而非当前事务的快照。&lt;/p&gt;
&lt;h3&gt;3-3-1-2 HOT&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;3-3-1-2-hot&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#3-3-1-2-hot&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;如果该 tuple 在 HOT 链中，问题就有些棘手。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;此时不方便将 HOT 链破坏掉。（创建索引的时候直接修改 HEAP 中内容确实不算合理）&lt;/li&gt;
&lt;li&gt;但如果不破坏，就（必须）将该 tuple 加入到新索引中，而该 HOT 链可能和新索引冲突&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为此，PostgreSQL 采取了一种巧妙地方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不将该 tuple 加入到新索引中&lt;/li&gt;
&lt;li&gt;对于一些仍然可以访问该 tuple 的事务，阻止其使用新索引。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;阻止的方式为：pg_index 中有字段 &lt;code&gt;indcheckxmin&lt;/code&gt; 。当该字段为 true 时，如果事务 T 想要使用该索引，需要确保自己最旧的快照在创建索引的快照之后，即事物 T 的 &lt;code&gt;TransactionXmin&lt;/code&gt; （逻辑）大于 &lt;code&gt;pg_index&lt;/code&gt;  中对应 tuple 的 &lt;code&gt;xmin&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;TransactionXmin&lt;/code&gt; 表示当前事务的所有快照中，最小的的 xmin。（快照中， &lt;code&gt;xmin&lt;/code&gt; 前的事务都结束了）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pg_index&lt;/code&gt;  中对应 tuple 的 &lt;code&gt;xmin&lt;/code&gt; 表示 该索引创建的 xid&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-008-indcheckxmin.png&#34; alt=&#34;008-indcheckxmin&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;3-3-2 对 HOT 链上的元组构建索引&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;3-3-2-对-hot-链上的元组构建索引&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#3-3-2-%e5%af%b9-hot-%e9%93%be%e4%b8%8a%e7%9a%84%e5%85%83%e7%bb%84%e6%9e%84%e5%bb%ba%e7%b4%a2%e5%bc%95&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;由于创建新索引会导致已有的 HOT 链无效，这里还需讨论如何将已有 HOT 链中元组如何构建到索引中。考虑如下情形，现在需要对 &lt;code&gt;y&lt;/code&gt; 这一列创建索引，只需要将 tuple_3 加入到索引中(y=2)即可。由于一个 line pointer 只能在一个 HOT 链中，所以此时索引应该指向 lp_1（注意 tuple_1 有 y=1)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-009-index-entry-use-root.png&#34; alt=&#34;009-index-entry-use-root&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果想去“优化“ 新HOT链的长度，让索引指向 lp_2 或者 lp_3，会产生很多问题，例如指向 lp_3，如果后续更新 tuple3 为 tuple4(x=1,y=2,z=3)，旧很难清理 HOT 链，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-010-index-entry-not-root_1.png&#34; alt=&#34;010-index-entry-not-root_1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在清理时还需要注意 ptr_3 有索引指向，造成代码复杂度很高&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-011-index-entry-not-root_2.png&#34; alt=&#34;011-index-entry-not-root_2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;4 Create Index Concurrently (CIC) 的原理解析&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;解决的问题：
&lt;ul&gt;
&lt;li&gt;同步创建索引 &lt;code&gt;create index concurrently&lt;/code&gt; 解决了创建索引期间，&lt;code&gt;DML&lt;/code&gt; 语句会被阻塞的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思路：
&lt;ul&gt;
&lt;li&gt;和 &lt;code&gt;pg_repack&lt;/code&gt; , &lt;code&gt;pg_squeeze&lt;/code&gt; 等重写表的工具相似，内核中实现的同步创建索引也使用了 “存量 + 增量” 的方式。&lt;/li&gt;
&lt;li&gt;不同的是，官方提供的同步创建索引功能，几乎没有和任何其他特性耦合，例如没有使用触发器和逻辑复制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;难点有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在不同的字段上，新创建一个索引会破坏 &lt;code&gt;heap&lt;/code&gt; 中的原 &lt;code&gt;HOT&lt;/code&gt; 链，创建的过程中也会影响到新的 &lt;code&gt;HOT&lt;/code&gt; 链。&lt;/li&gt;
&lt;li&gt;在不使用触发器和逻辑复制等功能的情况下，如何记录增量数据？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简单流程：通过三个事务完成&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;阶段一：创建索引文件和修改系统表。 此时索引为 &lt;code&gt;not ready&lt;/code&gt; + &lt;code&gt;not valid&lt;/code&gt;。但其他 SQL 需要遵循对应的 HOT 规则。&lt;/li&gt;
&lt;li&gt;阶段二：获取快照 &lt;code&gt;A&lt;/code&gt; ，使用对该快照可见的元组创建索引，并设置为 &lt;code&gt;ready&lt;/code&gt; 。阶段二结束后，其他 SQL 修改表时，也需要修改该索引。&lt;/li&gt;
&lt;li&gt;阶段三：获取快照 &lt;code&gt;B&lt;/code&gt; ，将快照 &lt;code&gt;B&lt;/code&gt; 可见但快照 &lt;code&gt;A&lt;/code&gt; 不可见的元组插入索引，并设置为 &lt;code&gt;valid&lt;/code&gt; ，查询可以使用该索引。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;4-1 阶段一：创建空索引&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;4-1-阶段一创建空索引&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#4-1-%e9%98%b6%e6%ae%b5%e4%b8%80%e5%88%9b%e5%bb%ba%e7%a9%ba%e7%b4%a2%e5%bc%95&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;创建空索引的核心原因是：在将存量数据加入的索引中时，确保其他连接的修改不会破坏 HOT（更近一步的原因在阶段 2 描述）。方式为向 pg_index 中记录一个 &lt;code&gt;indisready==false &amp;amp;&amp;amp; indisvalid==false&lt;/code&gt; 的索引。所以问题在于：其他连接如何感知到该索引。&lt;/p&gt;
&lt;p&gt;每个连接都会缓存自己 &lt;code&gt;relcache&lt;/code&gt; 和 &lt;code&gt;syscache&lt;/code&gt; ，如果没有接收到缓存失效信息，这些缓存会一直保留。一般而言，事务开始时，会处理所有的缓存失效消息，在事务的执行的过程中，也有埋点来处理失效信息。而且，处理结果不会返回给发送端。&lt;/p&gt;
&lt;p&gt;所以为了保证其他连接都会看到新索引，简单的想法是：在创建空索引的事务结束后，需要等到当前所有其他事务全部结束，才能开启第二阶段。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-012-see-empty-index.png&#34; alt=&#34;012-see-empty-index&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;实际上，代码实现与上述有所差别：&lt;/p&gt;
&lt;p&gt;PostgreSQL 中，还有一处会处理失效信息：当进程执行修改表的操作时，需要打开表获取 &lt;code&gt;relcache&lt;/code&gt; ，而在打开表操作时，会处理缓存失效信息。打开表获取 relcache ：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;relation_open/try_relation_open -&amp;gt; LockRelationOid -&amp;gt; AcceptInvalidationMessages&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;所以此时：如果当前执行 CIC 的连接，可以获取到该表的 &lt;code&gt;ShareLock&lt;/code&gt; lock，可以说明&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;此时没有其他事务打开了该表并会能修改：因为 &lt;code&gt;SharedLock&lt;/code&gt; 仅不与 &lt;code&gt;select&lt;/code&gt; 、 &lt;code&gt;select for update/share&lt;/code&gt; 相冲突，与任何修改表的锁相冲突&lt;/li&gt;
&lt;li&gt;后续打开该表的事务，都会处理之前发送的缓存失效信息，可以感知到该空索引&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-013-wait-for-lockers.png&#34; alt=&#34;013-wait-for-lockers&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;具体代码为 lmgr 层的 &lt;code&gt;WaitForLockers&lt;/code&gt; 函数&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * Now we must wait until no running transaction could have the table open
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * with the old list of indexes.  Use ShareLock to consider running
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * transactions that hold locks that permit writing to the table.  Note we
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * do not need to worry about xacts that open the table for writing after
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * this point; they will see the new index when they open it.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;WaitForLockers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heaplocktag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ShareLock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h2&gt;4-2 阶段二：使用存量数据创建索引&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;4-2-阶段二使用存量数据创建索引&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#4-2-%e9%98%b6%e6%ae%b5%e4%ba%8c%e4%bd%bf%e7%94%a8%e5%ad%98%e9%87%8f%e6%95%b0%e6%8d%ae%e5%88%9b%e5%bb%ba%e7%b4%a2%e5%bc%95&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在确保所有连接都发现了该索引时，可以使用存量数据创建索引&lt;/p&gt;
&lt;p&gt;该过程和普通的创建索引相似，但是进行 &lt;code&gt;heap&lt;/code&gt; 扫描时，使用的快照不同。在一般的索引创建中，使用的是 &lt;code&gt;SnapshotAny&lt;/code&gt; ，所有行都可见，而 CIC 中使用的是当前事务的快照。&lt;/p&gt;
&lt;p&gt;问题仍然出现在 HOT 链上，虽然对于创建索引的字段，当前不会产生新的 HOT 链，但是仍然会有旧的 HOT 链 ，所以构建索引的方式和普通地创建索引相同。&lt;/p&gt;
&lt;p&gt;举个例子:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始状态有 tuple_1 和 tuple_2 ，以及字段 a 上的索引。现对字段 b 创建建索引，&lt;/li&gt;
&lt;li&gt;tuple_1 对当前快照不可见（too old）&lt;/li&gt;
&lt;li&gt;tuple_2 可见。当把 tuple_2 加入到索引中时，索引值为 b=2，但索引入口指向 b=1 的元组（HOT链的开头），&lt;/li&gt;
&lt;li&gt;在阶段2中，有其他事务将 tuple_2 进行成了 tuple_3 ，将 c 改为了 2。该更新满足 HOT （a, b 都没有变），所以仍在 HOT 链上。但是 tuple_3 对当前快照（CIC）不可见 (in feature)，所以不处理。&lt;/li&gt;
&lt;li&gt;在阶段2中，有其他事务将 tuple_3 进行成了 tuple_4，将 b 改为了3。该更新不满足 HOT，所以索引 idx_a 需要创建新的指针&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-014-cic-phase2-example.png&#34; alt=&#34;014-cic-phase2-example&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当索引构建完毕后，将 pg_index 的中对应行的 &lt;code&gt;indisready&lt;/code&gt; 设置为 true，这样其他事务后续修改表时，会同步修改该索引。和阶段1相似，当前事务提交后，开启新的事物（xact3），等到其他事务都感知到 &lt;code&gt;indisready=true&lt;/code&gt; 时（同样使用 WaitForLockers 方案），开始阶段三。&lt;/p&gt;
&lt;h2&gt;4-3 阶段三： 增量数据的插入&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;4-3-阶段三-增量数据的插入&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#4-3-%e9%98%b6%e6%ae%b5%e4%b8%89-%e5%a2%9e%e9%87%8f%e6%95%b0%e6%8d%ae%e7%9a%84%e6%8f%92%e5%85%a5&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;该步骤的主要工作为把阶段二中遗漏的 tuple 加入索引中。方法为：使用当前的事务快照，将该快照可见的但是索引中没有的元组，加入索引中，具体做法为：&lt;/p&gt;
&lt;p&gt;（一）扫描索引，获取索引中所有的 ctid，并进行排序，得到 &lt;code&gt;Tuplesortstate&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;（二）使用当前快照，进行全表扫描，对于每一行，在 &lt;code&gt;Tuplesortstate&lt;/code&gt; 搜索对应的 ctid。注意，如果全表扫描得到的是 heap only tuple，则使用其根 tuple 的 ctid。如果在 &lt;code&gt;Tuplesortstate&lt;/code&gt; 中没有找打，则将该元组插入到索引中。&lt;/p&gt;
&lt;p&gt;举个例子： tuple_3 虽然是在阶段二中新增的 tuple ，但是其根 tuple，即 tuple_1 已经在索引中了，所以在阶段三中忽略。而 tuple_4 不在 HOT 链中，也不在索引中，所以需要插入到索引中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-015-cic-phase3-build.png&#34; alt=&#34;015-cic-phase3-build&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;增量数据插入结束后，仍不能设置 &lt;code&gt;indisvalid=true&lt;/code&gt; ：考虑一个元组，它在阶段二中被创建，却在阶段三前被删除，所以此时该元组仍然不在索引中，但是可能有其他事务（事务 T）可以看到该元组，故此时需要等事务 T 结束。由于无法确保事务 T 会修改表，所以这里不能使用阶段一中的 &lt;code&gt;WaitForLockers&lt;/code&gt; 方法，只能等待。&lt;/p&gt;
&lt;p&gt;所以流程为将增量数据插入元组后，获取当前快照的 xmin，记为 xminlimit，并提交。之后开启新的事物，等待所有含有 &lt;code&gt;snap.xmin&amp;lt;xminlimit&lt;/code&gt; 的快照的事务全部提交，再设置 &lt;code&gt;indisvalid=true&lt;/code&gt; 并提交。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-016-cic-phase3-wait.png&#34; alt=&#34;016-cic-phase3-wait&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;提交后，所以事务（包括正在运行的）都可以使用新索引了。&lt;/p&gt;
&lt;h2&gt;4-3 FAQ&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;4-3-faq&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#4-3-faq&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;4-3-1 unique index&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;4-3-1-unique-index&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#4-3-1-unique-index&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;问题：创建 unique index 时，阶段二和阶段三的两次插入，会引起 unique index 的冲突？&lt;/p&gt;
&lt;p&gt;unique 冲突都是在各自索引的 &lt;code&gt;aminsert&lt;/code&gt; 中实现的，只有 btree 实现了 unique 特性&lt;/p&gt;
&lt;p&gt;举例1：表有 a,b 三个字段，其中 a 上有索引&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;tuple_1(1,1) 在阶段二中被加入到索引中。&lt;/li&gt;
&lt;li&gt;在阶段二中，有其他事务将 tuple_1 更新为了 tuple_2(2,1)&lt;/li&gt;
&lt;li&gt;在阶段三中，将 tuple_2 插入到索引中时，索引发现 tuple_1 可能，使用 &lt;code&gt;SNAPSHOT_DIRTY&lt;/code&gt; 看 tuple_1 ，发现 tuple_1 已经被删除，所以实际上没有冲突，该情况和一般的索引插入相同：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-017-cic-unique-check_1.png&#34; alt=&#34;017-cic-unique-check_1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;举例2：表有 a,b 三个字段，其中 a 上有索引&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;tuple_1(1,1) 在阶段二中被加入到索引中。&lt;/li&gt;
&lt;li&gt;在阶段二中，有其他事务将 tuple_1 更新为了 tuple_2(2,1)&lt;/li&gt;
&lt;li&gt;在阶段三中，有其他事务将 tuple_2 更新为了 tuple_3(3,1)，而此时执行 CIC 的事务快照只能看见 tuple_2&lt;/li&gt;
&lt;li&gt;在阶段三中，将 tuple_2 插入到索引中时：
&lt;ol&gt;
&lt;li&gt;发现 tuple_1 可能有冲突，使用 &lt;code&gt;SNAPSHOT_DIRTY&lt;/code&gt; 看 tuple_1 ，发现 tuple_1 已经被删除，所以实际上没有冲突&lt;/li&gt;
&lt;li&gt;发现 tuple_3 可能有冲突，使用 &lt;code&gt;SNAPSHOT_DIRTY&lt;/code&gt; 看 tuple_3 ，发现 tuple_3 没有删除，此时再使用 &lt;code&gt;SNAPSHOT_SELF&lt;/code&gt; 看  tuple_2 （即将要插入的元组），发现 tuple_2 已经被删除，故插入失败，但不报错。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/0024-018-cic-unique-check_2.png&#34; alt=&#34;018-cic-unique-check_2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
