<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>/</link>
    <description>Recent content on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 03 Sep 2025 21:01:17 +0800</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PG: How to restart bgworker</title>
      <link>/posts/20250903-2/</link>
      <pubDate>Wed, 03 Sep 2025 21:01:17 +0800</pubDate>
      <guid>/posts/20250903-2/</guid>
      <description>&lt;h2 id=&#34;postmaster-的代码路径&#34;&gt;postmaster 的代码路径&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-&amp;gt;ServerLoop&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -&amp;gt;WaitEventSetWait&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -&amp;gt;process_pm_child_exit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -&amp;gt;waitpid(-1, )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -&amp;gt;CleanupBackgroundWorker()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;CleanupBackgroundWorker&lt;/code&gt; 的细节：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;如果bgworker以 0 退出，则正常退出，不参与重启逻辑。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;如果以 1 退出，进入后续的正常重启逻辑&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;否则，视为系统级 crash， 重启整个实例。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;关键变量：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;RegisteredBgWorker.rw_crashed_at&lt;/code&gt; 非 0 视为崩溃&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;HaveCrashedWorker&lt;/code&gt;  postmaster 在本轮循环是是否检测到了 bgworker 崩溃&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;StartWorkerNeeded&lt;/code&gt; 此刻是否需要重启 bgworker 。bgworker 支持设置重启间隔，所以 postmaster 在每次循环中，不总会重启所有崩溃的的 bgworker&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;appendix&#34;&gt;appendix&lt;/h2&gt;&#xA;&lt;h3 id=&#34;waitpid&#34;&gt;waitpid&lt;/h3&gt;&#xA;&lt;p&gt;(Generated from AI, haven&amp;rsquo;t been confirmed by myself)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;while&lt;/span&gt; ((pid = &lt;span style=&#34;color:#ff0&#34;&gt;waitpid&lt;/span&gt;(-&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &amp;amp;exitstatus, WNOHANG)) &amp;gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If multiple child processes have already terminated before this loop runs:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The loop will collect them one by one, in the order determined by the operating system&amp;rsquo;s process table&lt;/li&gt;&#xA;&lt;li&gt;Each iteration of the loop will retrieve one zombie process&lt;/li&gt;&#xA;&lt;li&gt;The loop will continue until all terminated child processes have been collected&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;When a child process terminates in a Unix/Linux system, it doesn&amp;rsquo;t immediately disappear from the system. Instead, it enters a &amp;ldquo;zombie&amp;rdquo; state (sometimes called a &amp;ldquo;defunct&amp;rdquo; state). In this state:&lt;/p&gt;</description>
    </item>
    <item>
      <title>volatile in sigsetjmp and siglongjmp</title>
      <link>/posts/20250829-1-volatile/</link>
      <pubDate>Fri, 29 Aug 2025 21:05:24 +0800</pubDate>
      <guid>/posts/20250829-1-volatile/</guid>
      <description>&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;&#xA;&lt;p&gt;In postgresql, the error handling methods &lt;code&gt;pg_try() + elog() + pg_catch()&lt;/code&gt; is implemented through &lt;code&gt;sigsetjmp&lt;/code&gt; and &lt;code&gt;siglongjmp&lt;/code&gt;. But the variables changed in &lt;code&gt;pg_try()&lt;/code&gt; and used in &lt;code&gt;pg_catch()&lt;/code&gt; must be declared as &lt;code&gt;volatile&lt;/code&gt;. The reasons are below:&lt;/p&gt;&#xA;&lt;h2 id=&#34;reason&#34;&gt;reason&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The sigsetjmp call must store all the register value and the siglongjmp restore the registers from it. It&amp;rsquo;s very reasonable in the view of asm code.&lt;/li&gt;&#xA;&lt;li&gt;If a variable is not declared as volatile, the assignment operation of it in &lt;code&gt;pg_try()&lt;/code&gt; may only changes the variable in the register. And after jumping by the &lt;code&gt;siglongjmp&lt;/code&gt; call, the value of variable is changed back to the point of &lt;code&gt;sigsetjmp&lt;/code&gt; , which means the changes in &lt;code&gt;pg_try()&lt;/code&gt; lost&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;example&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s consider an example:&lt;/p&gt;</description>
    </item>
    <item>
      <title>MCP学习</title>
      <link>/post/mcp-learning-z1f8c7l.html</link>
      <pubDate>Tue, 08 Apr 2025 19:57:51 +0800</pubDate>
      <guid>/post/mcp-learning-z1f8c7l.html</guid>
      <description>&lt;h1 id=&#34;mcp学习&#34;&gt;MCP学习&lt;/h1&gt;&#xA;&lt;h1 id=&#34;自己对mcp的理解&#34;&gt;自己对MCP的理解&lt;/h1&gt;&#xA;&lt;p&gt;MCP server (一个简单的程序) 通过定义实现一系列函数，让 MCP client(例如 claude) 通过这些函数，获取到需要的信息。&lt;/p&gt;&#xA;&lt;p&gt;MCP server:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# in /Users/yby/code/mcp_test/mcp-server-demo/server.py&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# List content in my code directory&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@mcp.tool()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;list_code_directory&lt;/span&gt;() -&amp;gt; str:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&amp;#34;&amp;#34;List content in the code directory&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    directory = &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;/Users/yby/code/&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    contents = os.listdir(directory)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;n&amp;#34;&lt;/span&gt;.join(contents)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;MCP client 配置。注意 &lt;code&gt;uv&lt;/code&gt;​  路径是 full path&lt;/p&gt;</description>
    </item>
    <item>
      <title>mesi-summary</title>
      <link>/post/me-z1ogd4d.html</link>
      <pubDate>Sat, 29 Mar 2025 08:56:22 +0800</pubDate>
      <guid>/post/me-z1ogd4d.html</guid>
      <description>&lt;h2 id=&#34;store-buffer&#34;&gt;store buffer&lt;/h2&gt;&#xA;&lt;h3 id=&#34;why&#34;&gt;why?&lt;/h3&gt;&#xA;&lt;p&gt;When a CPU wants to modify data (not in the &amp;ldquo;Modified&amp;rdquo; or &amp;ldquo;Exclusive&amp;rdquo; state), it will always update the data regardless of the responses from other CPUs.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Thus, the data is immediately updated in the store buffer.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;complexity-it-introduces&#34;&gt;complexity it introduces&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Multilayer caches (reason for write memory barrier):&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Example: Consider a CPU storing two values (A and B) sequentially, where A is in the store buffer and B is in the cache. It is uncertain whether another CPU will observe the updated A before observing B, as it depends on whether the invalidate message for A is received before the request for B.&lt;/li&gt;&#xA;&lt;li&gt;Reason: Broadcasting later changes (in the cache) before earlier changes (in the store buffer) are visible to others.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Write memory barrier&lt;/strong&gt;: CPUs must wait until the store buffer is cleared before applying subsequent changes. Alternatively, later changes can remain in the store buffer until all prior entries in the store buffer have been processed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>DDIA--Encoding and Evolution(1)</title>
      <link>/post/ddiaencoding-and-evolution-1-2dgaes.html</link>
      <pubDate>Tue, 18 Mar 2025 23:03:23 +0800</pubDate>
      <guid>/post/ddiaencoding-and-evolution-1-2dgaes.html</guid>
      <description>&lt;h1 id=&#34;ddiaencoding-and-evolution1&#34;&gt;DDIA&amp;ndash;Encoding and Evolution(1)&lt;/h1&gt;&#xA;&lt;h2 id=&#34;compatibility&#34;&gt;Compatibility&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Backward compatibility: Newer code can read data that was written by older code.&lt;/li&gt;&#xA;&lt;li&gt;Forward compatibility: Older code can read data that was written by newer code.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;‍&lt;/p&gt;&#xA;&lt;h2 id=&#34;thrift-and-protocol-buffers&#34;&gt;Thrift and Protocol Buffers&lt;/h2&gt;&#xA;&lt;p&gt;Apache Thrift and Protocol Buffers (protobuf) are binary encoding libraries that are based on the same principle.&lt;/p&gt;&#xA;&lt;p&gt;‍&lt;/p&gt;&#xA;&lt;p&gt;In Thrift, you would describe the schema in the Thrift &lt;strong&gt;interface definition language&lt;/strong&gt; (&lt;strong&gt;IDL&lt;/strong&gt;) like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;struct&lt;/span&gt; Person {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: required string userName,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;: optional i64 favoriteNumber,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;: optional list&amp;lt;string&amp;gt; interests&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;‍&lt;/p&gt;</description>
    </item>
    <item>
      <title>跳表的实现</title>
      <link>/post/implementation-of-skipping-tables-299fl1.html</link>
      <pubDate>Mon, 03 Mar 2025 22:46:11 +0800</pubDate>
      <guid>/post/implementation-of-skipping-tables-299fl1.html</guid>
      <description>&lt;h1 id=&#34;跳表的实现&#34;&gt;跳表的实现&lt;/h1&gt;&#xA;&lt;p&gt;之前还没有写过跳表，补一下实现，&lt;/p&gt;&#xA;&lt;p&gt;​&lt;img src=&#34;https://raw.githubusercontent.com/mobilephone724/hugoBlog/siyuan-pub/images/skip_table-20250304233140-hzl983v.png&#34; alt=&#34;skip_table&#34;&gt;​&lt;/p&gt;&#xA;&lt;p&gt;FROM deepseek&lt;/p&gt;&#xA;&lt;h3 id=&#34;跳表skip-list原理详解&#34;&gt;跳表（Skip List）原理详解&lt;/h3&gt;&#xA;&lt;p&gt;跳表是一种基于有序链表的高效数据结构，通过引入多层索引实现快速查找，其平均时间复杂度为O(log n)，与平衡树相当，但实现更简单。以下是其核心原理：&lt;/p&gt;</description>
    </item>
    <item>
      <title>lsmTree</title>
      <link>/post/lsmtree-2fapmq.html</link>
      <pubDate>Mon, 03 Mar 2025 22:34:36 +0800</pubDate>
      <guid>/post/lsmtree-2fapmq.html</guid>
      <description>&lt;h1 id=&#34;lsmtree&#34;&gt;lsmTree&lt;/h1&gt;&#xA;&lt;h3 id=&#34;lsm-tree-简介&#34;&gt;&lt;strong&gt;LSM-Tree 简介&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;LSM-Tree（Log-Structured Merge-Tree）是一种为高写入吞吐设计的存储结构，广泛应用于 NoSQL 数据库（如 LevelDB、RocksDB）。其核心思想是将随机写入转换为顺序写入，并通过分层合并优化数据管理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>执行引擎概览</title>
      <link>/post/execution-engine-overview-lmovi.html</link>
      <pubDate>Mon, 03 Mar 2025 22:25:12 +0800</pubDate>
      <guid>/post/execution-engine-overview-lmovi.html</guid>
      <description>&lt;h1 id=&#34;执行引擎概览&#34;&gt;执行引擎概览&lt;/h1&gt;&#xA;&lt;p&gt;FROM deepseek&lt;/p&gt;&#xA;&lt;h3 id=&#34;执行引擎对比表&#34;&gt;&lt;strong&gt;执行引擎对比表&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;数据处理方式&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;优势场景&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;劣势场景&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;代表系统&lt;/strong&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Volcano&lt;/td&gt;&#xA;          &lt;td&gt;逐行处理&lt;/td&gt;&#xA;          &lt;td&gt;OLTP 短查询&lt;/td&gt;&#xA;          &lt;td&gt;复杂分析查询&lt;/td&gt;&#xA;          &lt;td&gt;MySQL、PostgreSQL&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;向量化&lt;/td&gt;&#xA;          &lt;td&gt;按列批量处理&lt;/td&gt;&#xA;          &lt;td&gt;OLAP 扫描/聚合&lt;/td&gt;&#xA;          &lt;td&gt;高并发点查&lt;/td&gt;&#xA;          &lt;td&gt;ClickHouse、Redshift&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;编译执行&lt;/td&gt;&#xA;          &lt;td&gt;编译为机器码&lt;/td&gt;&#xA;          &lt;td&gt;复杂查询（Join）&lt;/td&gt;&#xA;          &lt;td&gt;短查询编译开销&lt;/td&gt;&#xA;          &lt;td&gt;HyPer、MemSQL&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;MPP&lt;/td&gt;&#xA;          &lt;td&gt;分布式并行&lt;/td&gt;&#xA;          &lt;td&gt;海量数据分析&lt;/td&gt;&#xA;          &lt;td&gt;网络延迟敏感场景&lt;/td&gt;&#xA;          &lt;td&gt;Presto、Snowflake&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Push-Based&lt;/td&gt;&#xA;          &lt;td&gt;流水线推送&lt;/td&gt;&#xA;          &lt;td&gt;流式处理/实时计算&lt;/td&gt;&#xA;          &lt;td&gt;复杂查询资源管理&lt;/td&gt;&#xA;          &lt;td&gt;Apache Flink&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;混合型&lt;/td&gt;&#xA;          &lt;td&gt;动态选择模式&lt;/td&gt;&#xA;          &lt;td&gt;混合负载（HTAP）&lt;/td&gt;&#xA;          &lt;td&gt;实现复杂度高&lt;/td&gt;&#xA;          &lt;td&gt;TiDB、DuckDB&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;sql-执行引擎的主要类型及特点&#34;&gt;&lt;strong&gt;SQL 执行引擎的主要类型及特点&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;SQL 执行引擎是数据库系统的核心组件，负责将优化后的查询计划转换为实际的数据操作。不同的执行引擎设计直接影响查询性能、资源利用率和适用场景。以下是常见的 SQL 执行引擎类型及其特点：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Heap 原理</title>
      <link>/post/heap-principle-z1iauje.html</link>
      <pubDate>Mon, 03 Mar 2025 21:19:18 +0800</pubDate>
      <guid>/post/heap-principle-z1iauje.html</guid>
      <description>&lt;h1 id=&#34;heap-原理&#34;&gt;Heap 原理&lt;/h1&gt;&#xA;&lt;p&gt;堆（Heap）是一种基于完全二叉树的数据结构，常用于实现优先队列。它分为两种类型：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;最大堆&lt;/strong&gt;：父节点的值 ≥ 子节点的值&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;最小堆&lt;/strong&gt;：父节点的值 ≤ 子节点的值&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;堆通常通过数组实现，利用完全二叉树的特性高效管理元素。&lt;/p&gt;</description>
    </item>
    <item>
      <title>可串行化的实现思路</title>
      <link>/post/implementation-ideas-for-serialization-z2idq9y.html</link>
      <pubDate>Sun, 02 Mar 2025 22:13:38 +0800</pubDate>
      <guid>/post/implementation-ideas-for-serialization-z2idq9y.html</guid>
      <description>&lt;h1 id=&#34;可串行化的实现思路&#34;&gt;可串行化的实现思路&lt;/h1&gt;&#xA;&lt;p&gt;paper: &lt;a href=&#34;https://drkp.net/papers/ssi-vldb12.pdf&#34;&gt;https://drkp.net/papers/ssi-vldb12.pdf&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;可串行化冲突的例子&#34;&gt;可串行化冲突的例子&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;wr-dependencies&lt;/strong&gt;: if T1 writes a version of an object, and T2 reads that version, then T1 appears to have executed before T2&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ww-dependencies&lt;/strong&gt;: if T1 writes a version of some object, and T2 replaces that version with the next version, then T1 appears to have executed before T2&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;rw-antidependencies&lt;/strong&gt;: &lt;em&gt;if T1 writes a version of some object, and T2 reads the previous version of that object, then T1 appears to have executed after T2, because T2 did not see its update&lt;/em&gt;. As we will see, these dependencies are central to SSI; we sometimes also refer to them as rw-conflicts.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;​&lt;img src=&#34;https://raw.githubusercontent.com/mobilephone724/hugoBlog/siyuan-pub/images/image-20250302223239-pdjy6rq.png&#34; alt=&#34;image&#34;&gt;​&lt;/p&gt;</description>
    </item>
    <item>
      <title>【日拱一卒】2025-03-02</title>
      <link>/post/20250302-8ctcr.html</link>
      <pubDate>Sun, 02 Mar 2025 20:00:48 +0800</pubDate>
      <guid>/post/20250302-8ctcr.html</guid>
      <description>&lt;h1 id=&#34;2025-03-02&#34;&gt;2025-03-02&lt;/h1&gt;&#xA;&lt;h2 id=&#34;符文般的js&#34;&gt;符文般的JS&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-source&#34; data-lang=&#34;source&#34;&gt;0 = [+[]]+[]&#xA;1 = [+!+[]]+[]&#xA;10 = [+!+[]]+[+[]]&#xA;100 = [+!+[]]+[+[]]+[+[]]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;1-0--&#34;&gt;1. &lt;code&gt;0 = [+[]]+[]&lt;/code&gt;​&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;​&lt;code&gt;[]&lt;/code&gt;​ 是一个空数组。&lt;/li&gt;&#xA;&lt;li&gt;​&lt;code&gt;+[]&lt;/code&gt;​ 将空数组转换为数字。空数组转换为数字时是 &lt;code&gt;0&lt;/code&gt;​，所以 &lt;code&gt;+[]&lt;/code&gt;​ 的结果是 &lt;code&gt;0&lt;/code&gt;​。&lt;/li&gt;&#xA;&lt;li&gt;​&lt;code&gt;[+[]]&lt;/code&gt;​ 将 &lt;code&gt;0&lt;/code&gt;​ 放入一个数组中，结果是 &lt;code&gt;[0]&lt;/code&gt;​。&lt;/li&gt;&#xA;&lt;li&gt;​&lt;code&gt;[+[]]+[]&lt;/code&gt;​ 将数组 &lt;code&gt;[0]&lt;/code&gt;​ 转换为字符串，结果是 &lt;code&gt;&amp;quot;0&amp;quot;&lt;/code&gt;​。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;最终结果：&lt;code&gt;&amp;quot;0&amp;quot;&lt;/code&gt;​（字符串形式的 &lt;code&gt;0&lt;/code&gt;​）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【日拱一卒】2025-03-01</title>
      <link>/post/20250301-1r5xzc.html</link>
      <pubDate>Sat, 01 Mar 2025 15:14:45 +0800</pubDate>
      <guid>/post/20250301-1r5xzc.html</guid>
      <description>&lt;h2 id=&#34;column-oriented-storage&#34;&gt;Column-Oriented Storage&lt;/h2&gt;&#xA;&lt;h3 id=&#34;basic-idea&#34;&gt;Basic idea:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Although fact tables are often over 100 columns wide, &lt;strong&gt;a typical data warehouse query only accesses 4 or 5 of them at one time&lt;/strong&gt; (&lt;code&gt;SELECT *&lt;/code&gt;​ queries are rarely needed for analytics)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;The idea behind column-oriented storage is simple: &lt;strong&gt;don’t store all the values from one row together, but store all the values from each column together instead&lt;/strong&gt;. If each column is stored in a separate file, a query only needs to read and parse those columns that are used in that query, which can save a lot of work&lt;/p&gt;</description>
    </item>
    <item>
      <title>Airwallex调研</title>
      <link>/post/airwallex-survey-z1tsrmd.html</link>
      <pubDate>Mon, 24 Feb 2025 20:20:27 +0800</pubDate>
      <guid>/post/airwallex-survey-z1tsrmd.html</guid>
      <description>&lt;h1 id=&#34;airwallex调研&#34;&gt;Airwallex调研&lt;/h1&gt;&#xA;&lt;p&gt;2025-02-24&lt;/p&gt;&#xA;&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;Airwallex（空中云汇）是一家全球领先的金融科技公司，专注于为企业提供&lt;strong&gt;跨境支付、外汇兑换、资金管理&lt;/strong&gt;等一站式数字化金融服务。其核心目标是通过技术手段解决传统跨境金融中的效率低、成本高、透明度不足等问题，尤其服务于跨境电商、在线旅游、企业服务、科技公司等全球化业务场景。&lt;/p&gt;</description>
    </item>
    <item>
      <title>github ssh 失败</title>
      <link>/post/github-ssh-failed-2k9xdc.html</link>
      <pubDate>Mon, 03 Feb 2025 08:44:15 +0800</pubDate>
      <guid>/post/github-ssh-failed-2k9xdc.html</guid>
      <description>&lt;h1 id=&#34;github-ssh-失败&#34;&gt;github ssh 失败&lt;/h1&gt;&#xA;&lt;h2 id=&#34;ssh-失败&#34;&gt;ssh 失败&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;github 可能会屏蔽 22 的 ssh 端口，导致使用 ssh 协议拉取推送代码失败&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;解决方法为使用 443 端口，同时将 hostname 改为 &lt;code&gt;ssh.github.com&lt;/code&gt;​&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;host github.com&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Hostname ssh.github.com&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  User git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  IdentityFile ~/.ssh/github_mbp_linux&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Port &lt;span style=&#34;color:#f60&#34;&gt;443&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原因在 &lt;a href=&#34;https://docs.github.com/en/authentication/troubleshooting-ssh/using-ssh-over-the-https-port&#34;&gt;https://docs.github.com/en/authentication/troubleshooting-ssh/using-ssh-over-the-https-port&lt;/a&gt; 中有涉及。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hot and Index</title>
      <link>/archive_posts/2024-09-13/</link>
      <pubDate>Fri, 13 Sep 2024 22:09:20 +0800</pubDate>
      <guid>/archive_posts/2024-09-13/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;&#xA;&lt;p&gt;本文介绍 PostgreSQL 中 Heap Only Tuple(HOT) 技术以及创建索引相关的知识，主要包含以下内容：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;HOT 的基本原理&lt;/li&gt;&#xA;&lt;li&gt;普通的创建索引 (Create Index) 流程&lt;/li&gt;&#xA;&lt;li&gt;同时创建索引 (Create Index Concurrently CIC) 的原理&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;本文不包括：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;btree 等索引的具体实现方式&lt;/li&gt;&#xA;&lt;li&gt;PostgreSQL 对索引访问方式 (Access Method) 的抽象&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;hot-基础&#34;&gt;HOT 基础&lt;/h2&gt;&#xA;&lt;p&gt;简单而言, HOT(Heap Only Tuple) 指没有索引指向的元组，用于消除元组更新引起的索引膨胀，原理如下图：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mobilephone724/blog_pictures/master/hot_page.2025_09_02_1756817083.png&#34; alt=&#34;image-20240913221635357&#34;&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;索引指向 line_ptr_1 ，line_ptr_1 指向 tuple_1 ，tuple_1 被更新后成为 tuple_2，此时 tuple_1 指向 tuple_2&lt;/li&gt;&#xA;&lt;li&gt;索引指向 line_ptr_3 , line_ptr_3 指向 line_ptr_4 ，line_ptr_4 指向 tuple3&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;显然，HOT 技术具有如下优点&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;对于被更新的元组，无需创建新的索引指针指向新元组&lt;/li&gt;&#xA;&lt;li&gt;旧元组可以被“普通操作”删除掉，并不一定需要 vacuum&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;hot-链的构建&#34;&gt;HOT 链的构建&lt;/h3&gt;&#xA;&lt;p&gt;（一）：表 tbl(x int, y int) 在 x 上有索引，先插入一行  tuple_1=(x=1, y=1) ，结果如下&lt;/p&gt;</description>
    </item>
    <item>
      <title>Everyday PostgreSQL</title>
      <link>/archive_posts/every_data_pg/</link>
      <pubDate>Fri, 16 Aug 2024 23:45:50 +0800</pubDate>
      <guid>/archive_posts/every_data_pg/</guid>
      <description>&lt;h2 id=&#34;0x01-8级锁的不对称性&#34;&gt;0x01-8级锁的不对称性&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;2024-08-17 00:14:26 +0800&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;用于创建索引的 &lt;code&gt;SHARE LOCK&lt;/code&gt;，虽然和修改时需要的 &lt;code&gt;ROW EXCL&lt;/code&gt; 锁冲突，却不和自己冲突。虽然创建索引时不能插入数据，但是可以创建其他索引。 &lt;code&gt;SHARE&lt;/code&gt; 这个名字非常贴切。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mobilephone724/blog_pictures/master/image-20240816235118730.2024_08_16_1723823478.png&#34; alt=&#34;image-20240816235118730&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;注意：create index 可以事务块中执行&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;test=# begin transaction;&#xA;BEGIN&#xA;test=*# insert into test values (1);&#xA;INSERT 0 1&#xA;test=*# create index on test (a);&#xA;CREATE INDEX&#xA;test=*# commit;&#xA;COMMIT&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而为了不阻塞读写，持有 &lt;code&gt;SHARE UPDATE EXCL&lt;/code&gt; 锁的行为， 例如 &lt;code&gt;vacuum&lt;/code&gt; ,  &lt;code&gt;create index concurrent&lt;/code&gt; ，大都不能在事务块中进行。原因可能是这些操作需要感知其他正在执行的事务的状态(status of running processes)，其行为超出了一般意义上 MVCC 的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>&#34;-fwrapv&#34; option in gcc</title>
      <link>/archive_posts/fwrapv/</link>
      <pubDate>Mon, 05 Aug 2024 21:30:13 +0800</pubDate>
      <guid>/archive_posts/fwrapv/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/47232954/what-does-fwrapv-do&#34;&gt;c - What does -fwrapv do? - Stack Overflow&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;-fwrapv&lt;/code&gt; tells the compiler that overflow of signed integer arithmetic must be treated as well-defined behavior, even though it is undefined in the C standard.&lt;/p&gt;&#xA;&lt;p&gt;It has two meaning full results:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;INT_MAX + 1 is overflowed to INT_MIN correctly. This is almost the default behavior in gcc.&lt;/li&gt;&#xA;&lt;li&gt;Don’t let the compiler assume &lt;code&gt;x + 1 &amp;gt; x&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;See the program below&lt;/p&gt;</description>
    </item>
    <item>
      <title>Number of Reversed Inode</title>
      <link>/archive_posts/reversed_inode/</link>
      <pubDate>Sat, 03 Aug 2024 17:13:10 +0800</pubDate>
      <guid>/archive_posts/reversed_inode/</guid>
      <description>&lt;h2 id=&#34;0x0-what-is-inode&#34;&gt;0x0 what is inode&lt;/h2&gt;&#xA;&lt;p&gt;From &lt;a href=&#34;https://en.wikipedia.org/wiki/Inode&#34;&gt;https://en.wikipedia.org/wiki/Inode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The &lt;strong&gt;inode&lt;/strong&gt; (index node) is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_structure&#34;&gt;data structure&lt;/a&gt; in a &lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_filesystem&#34;&gt;Unix-style file system&lt;/a&gt; that describes a &lt;a href=&#34;https://en.wikipedia.org/wiki/File_system&#34;&gt;file-system&lt;/a&gt; object such as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Computer_file&#34;&gt;file&lt;/a&gt; or a &lt;a href=&#34;https://en.wikipedia.org/wiki/Directory_(computing)&#34;&gt;directory&lt;/a&gt;. Each inode stores the attributes and disk block locations of the object&amp;rsquo;s data&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;From &lt;a href=&#34;https://www.redhat.com/sysadmin/inodes-linux-filesystem&#34;&gt;https://www.redhat.com/sysadmin/inodes-linux-filesystem&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;By definition, an inode is an index node. It serves as a unique identifier for a specific piece of metadata on a given filesystem. Each piece of metadata describes what we think of as a file. That&amp;rsquo;s right, inodes operate on each filesystem, independent of the others.&lt;/p&gt;</description>
    </item>
    <item>
      <title>constant recovery with undo</title>
      <link>/archive_posts/constant_recovery/</link>
      <pubDate>Sun, 07 Jul 2024 15:53:54 +0800</pubDate>
      <guid>/archive_posts/constant_recovery/</guid>
      <description>&lt;h2 id=&#34;0x0-backgroud&#34;&gt;0x0 backgroud&lt;/h2&gt;&#xA;&lt;p&gt;Even though ARIES simplifies the recovery process and allows it to be generic for all transactional operations, &lt;strong&gt;recovering the database to a consistent state requires undoing all operations performed by uncommitted transactions&lt;/strong&gt; which makes the cost of recovery proportional to the work performed by these transactions. This significantly impacts database availability since &lt;strong&gt;recovering a long running transaction can take several hours&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This paper describes the overall design of “&lt;strong&gt;Constant Time Recovery&lt;/strong&gt;” (CTR)&lt;/p&gt;</description>
    </item>
    <item>
      <title>MESI AND MEMORY_BARRIER: paper reading</title>
      <link>/archive_posts/mesi/</link>
      <pubDate>Sun, 16 Jun 2024 01:12:36 +0800</pubDate>
      <guid>/archive_posts/mesi/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;paper&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Introduction: &lt;a href=&#34;https://raw.githubusercontent.com/mobilephone724/blog_pictures/master/memory_barrier_withMarginNotes.2024_06_16_1718472482.pdf&#34;&gt;Memory Barriers: a Hardware View for Software Hackers&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;0x0-why-we-need-memory-barrier&#34;&gt;0x0 why we need memory barrier&lt;/h2&gt;&#xA;&lt;p&gt;In short, because &lt;strong&gt;reordering memory references allows much better performance&lt;/strong&gt;, and so memory barriers are needed to force ordering in things like synchronization primitives whose &lt;strong&gt;correct operation depends on ordered memory references&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;0x1-cache-structure&#34;&gt;0x1 &lt;strong&gt;Cache Structure&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mobilephone724/blog_pictures/master/Untitled.2024_06_17_1718631318.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;0x11-some-cases-of-cache-missnot-important&#34;&gt;0x11 some cases of cache miss(not important)&lt;/h3&gt;&#xA;&lt;p&gt;The cache miss means that the CPU will have to wait (or be “stalled”) for hundreds of cycles while the item is fetched from memory.&lt;/p&gt;</description>
    </item>
    <item>
      <title>roaring bitmap</title>
      <link>/archive_posts/roaring_bitmap/</link>
      <pubDate>Tue, 07 May 2024 21:04:38 +0800</pubDate>
      <guid>/archive_posts/roaring_bitmap/</guid>
      <description>&lt;h2 id=&#34;0x0-introduction&#34;&gt;0x0 Introduction&lt;/h2&gt;&#xA;&lt;p&gt;A bitmap, also known as a bit array or bitset, is a data structure that represents a fixed-size sequence of bits.  That is the value of the &lt;em&gt;ith&lt;/em&gt; bit representing the existence of the the &lt;em&gt;ith object.&lt;/em&gt;&#xA;Bare bitmap can cost much memory according to the total substantial data size, even if we have stored little infomation. Roaring bitmap provide a new method to compress the bitmap structure.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build PostgreSQL From Source</title>
      <link>/archive_posts/build_from_source/</link>
      <pubDate>Tue, 16 Apr 2024 23:09:39 +0800</pubDate>
      <guid>/archive_posts/build_from_source/</guid>
      <description>&lt;h2 id=&#34;download-through-git&#34;&gt;Download through git&lt;/h2&gt;&#xA;&lt;p&gt;See &lt;a href=&#34;https://www.postgresql.org/docs/current/git.html&#34;&gt;official docs&lt;/a&gt; for detail. Below is a simple example:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#eedd82&#34;&gt;user&lt;/span&gt;=dev&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#eedd82&#34;&gt;src_dir&lt;/span&gt;=postgresql&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#eedd82&#34;&gt;build_dir&lt;/span&gt;=/home/&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;/build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#eedd82&#34;&gt;data_dir&lt;/span&gt;=/home/&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;/data&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#eedd82&#34;&gt;superuser&lt;/span&gt;=postgres&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#eedd82&#34;&gt;defaultdb&lt;/span&gt;=test&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;build_dir&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;/bin/pg_ctl -D &lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;data_dir&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt; stop&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf &lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;build_dir&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf &lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd ~ &lt;span style=&#34;color:#0f0&#34;&gt;#start from home/${user}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://git.postgresql.org/git/postgresql.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd &lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;src_dir&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clean -xdf &lt;span style=&#34;color:#0f0&#34;&gt;# may be too dangerous&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# delete for add some configures accordingly&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./configure &lt;span style=&#34;color:#87ceeb&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;    --prefix=&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;build_dir&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;    --enable-cassert &lt;span style=&#34;color:#87ceeb&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;    --with-tcl &lt;span style=&#34;color:#87ceeb&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;    --with-perl &lt;span style=&#34;color:#87ceeb&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;    --with-python &lt;span style=&#34;color:#87ceeb&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;    --enable-debug &lt;span style=&#34;color:#87ceeb&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;    --without-icu &lt;span style=&#34;color:#87ceeb&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;    --with-openssl &lt;span style=&#34;color:#87ceeb&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#eedd82&#34;&gt;CC&lt;/span&gt;=/usr/bin/gcc &lt;span style=&#34;color:#87ceeb&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#eedd82&#34;&gt;CFLAGS&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;-O0 -pipe -Wall -g3&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make -j8 &amp;amp;&amp;amp; make install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make -C contrib install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;build_dir&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;/bin/initdb --username=&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;superuser&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt; --pgdata=&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;data_dir&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;build_dir&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;/bin/pg_ctl -D &lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;data_dir&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt; -l &lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;data_dir&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;/logfile start&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;build_dir&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;/bin/psql -U&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;superuser&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt; postgres -c &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;create database &lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;defaultdb&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;----------------- all finished -----------------------&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;use ************** &amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;[ &lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;build_dir&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;/bin/psql -U&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;superuser&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;defaultdb&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt; ] &amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;to connect postgresql&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd ..&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;‍&lt;/p&gt;</description>
    </item>
    <item>
      <title>Column Schema Change</title>
      <link>/archive_posts/column-schema-change/</link>
      <pubDate>Sun, 07 Apr 2024 22:19:24 +0800</pubDate>
      <guid>/archive_posts/column-schema-change/</guid>
      <description>&lt;p&gt;In PostgreSQL, the adding and dropping a column is an instant ddl(This name seems only to be used in mysql, but I like it). In this article, I try to explain the implement of that.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;The reference:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/docs/current/sql-altertable.html&#34;&gt;https://www.postgresql.org/docs/current/sql-altertable.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;basic-concepts&#34;&gt;Basic Concepts&lt;/h2&gt;&#xA;&lt;h3 id=&#34;instant-ddl&#34;&gt;instant ddl&lt;/h3&gt;&#xA;&lt;p&gt;For a table with $n$ tuples, if a ddl post can be performed in time $O(1)$ ,we call this ddl instant. So to implement an instant ddl, the data organization must remain unchanged. Instead, only the schema information can be changed, along withthe method to used to interpret the table&amp;rsquo;s binary data according to the schema.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SSL in PG</title>
      <link>/archive_posts/ssl-in-pg/</link>
      <pubDate>Mon, 12 Feb 2024 20:30:38 +0800</pubDate>
      <guid>/archive_posts/ssl-in-pg/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;In application level, ”PostgreSQL“ has native supports for using SSL connections. This requires that OpenSSL is installed on both client and server systems and that support in PostgreSQL is enabled at build time.&lt;/p&gt;&#xA;&lt;p&gt;With SSL, we can:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Encrypted data on Internet transmission&lt;/li&gt;&#xA;&lt;li&gt;Allow client to authorize the server(PostgreSQL), which can protect the client from connecting to the attacker’s server&lt;/li&gt;&#xA;&lt;li&gt;Allow server to authorize the client, which can stop the attacker from connecting to the database even if password leak.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;just-encrypt-internet-transmission&#34;&gt;Just encrypt internet transmission&lt;/h2&gt;&#xA;&lt;h3 id=&#34;build-binary-from-source&#34;&gt;build binary from source&lt;/h3&gt;&#xA;&lt;p&gt;just configure with &lt;code&gt;-with-openssl&lt;/code&gt;  option.  You may need to install &lt;code&gt;ssl-dev&lt;/code&gt; tools first&lt;/p&gt;</description>
    </item>
    <item>
      <title>pg_squeence_type</title>
      <link>/archive_posts/sequence_type/</link>
      <pubDate>Mon, 12 Feb 2024 19:51:45 +0800</pubDate>
      <guid>/archive_posts/sequence_type/</guid>
      <description>&lt;h1 id=&#34;sequence-type&#34;&gt;sequence type&lt;/h1&gt;&#xA;&lt;h1 id=&#34;background&#34;&gt;background&lt;/h1&gt;&#xA;&lt;p&gt;From official documents:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.postgresql.org/docs/16/functions-sequence.html&#34;&gt;9.17. Sequence Manipulation Functions&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.postgresql.org/docs/current/sql-createsequence.html&#34;&gt;CREATE SEQUENCE&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Sequence objects &lt;strong&gt;are special single-row tables&lt;/strong&gt; created with &lt;strong&gt;&lt;a href=&#34;https://www.postgresql.org/docs/16/sql-createsequence.html&#34;&gt;CREATE SEQUENCE&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Sequence objects are commonly used to generate unique identifiers for rows of a table. The sequence functions, provide simple, multiuser-safe methods for obtaining successive sequence values from sequence objects.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;main-function&#34;&gt;Main function&lt;/h1&gt;&#xA;&lt;p&gt;There is no much concerns about these functions&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;nextval&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Advances the sequence object to its next value and returns that value&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;setval&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Read Google F1</title>
      <link>/archive_posts/google-f1/</link>
      <pubDate>Mon, 14 Aug 2023 21:46:24 +0800</pubDate>
      <guid>/archive_posts/google-f1/</guid>
      <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;a protocol for schema evolution in a globally distributed database management system with &lt;strong&gt;shared data&lt;/strong&gt;, &lt;strong&gt;stateless servers&lt;/strong&gt;, and &lt;strong&gt;no global membership&lt;/strong&gt;.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;asynchronous&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;all servers can &lt;strong&gt;access&lt;/strong&gt; and &lt;strong&gt;update&lt;/strong&gt; all data during a schema change&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;INTRODUCTION&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Schema evolution:  the ability to change a database’s definition without the loss of data&lt;/li&gt;&#xA;&lt;li&gt;F1 is built on top of Spanner, a globally distributed &lt;strong&gt;KV&lt;/strong&gt; data store&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;main-feature&#34;&gt;Main feature&lt;/h3&gt;&#xA;&lt;p&gt;The main features of F1 that impact schema changes are:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Basic Knowledge of Database Log</title>
      <link>/archive_posts/database-log/</link>
      <pubDate>Thu, 31 Mar 2022 11:01:15 +0800</pubDate>
      <guid>/archive_posts/database-log/</guid>
      <description>&lt;h2 id=&#34;primitive-operation-if-transactions&#34;&gt;Primitive Operation if Transactions&lt;/h2&gt;&#xA;&lt;p&gt;There are &lt;code&gt;three address spaces&lt;/code&gt; that transaction interact in important ways:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The space of &lt;strong&gt;disk blocks&lt;/strong&gt; holding the database elements.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;memory address space&lt;/strong&gt; managed by buffer manager.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;local address space&lt;/strong&gt; of the transaction.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;To describe a transaction, we need some &lt;code&gt;operation notions&lt;/code&gt;:(X below is a database element while t is a local varible, and we suppose a database element is no larger than a single block)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Alice and Bob how to know whose number is bigger without giving away their own&#39;s</title>
      <link>/archive_posts/howtoknowwhoseisbigger/</link>
      <pubDate>Fri, 14 Jan 2022 23:43:08 +0800</pubDate>
      <guid>/archive_posts/howtoknowwhoseisbigger/</guid>
      <description>&lt;h2 id=&#34;definiteness&#34;&gt;Definiteness：&lt;/h2&gt;&#xA;&lt;p&gt;Suppose Alice has number $i$ and Bob has number $j$ and $1\leq i,j \leq 9$. We need a protocol for them to decide whether $i &amp;lt; j$ in the end(aside from their own values)&lt;/p&gt;&#xA;&lt;h2 id=&#34;solution&#34;&gt;Solution:&lt;/h2&gt;&#xA;&lt;p&gt;Let $M$ be the set of all $N$-bit nonnegative integers&lt;/p&gt;&#xA;&lt;p&gt;Let $Q_N$ be the set of all one-one and onto function from $M$ to $M$&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Alice generates a public key from $Q_N$, called $E_a$, and the inverse function of $E_a$ is $D_a$&lt;/li&gt;&#xA;&lt;li&gt;Bob picks a random value $x \in M$, compute $k = E_a(x)$, then send $k - j$ to Alice&lt;/li&gt;&#xA;&lt;li&gt;Alice computes $y_u=D_a(k - j + u)$ for $u = 1,2,\dots,9$&lt;/li&gt;&#xA;&lt;li&gt;Alice generates a random prime $p$ of $N/2$-bit, and computes $z_u=y_u(\mod p)$ for all $u$.&lt;/li&gt;&#xA;&lt;li&gt;Alice repeats step 4 until all $z_u$ differ by at least 2 in the $\mod p$ sense&lt;/li&gt;&#xA;&lt;li&gt;Alice sends the $p$ and $z_1,z_2,\dots,z_i,z_{i+1}+1,\dots,z_{9} +1$ (all in $\mod p$ sense)to Bob&lt;/li&gt;&#xA;&lt;li&gt;Bob looks at the $j$-th value(not counting p) sent from Alice, and decides that $i\geq j$ if it is equal to $x \mod p$, or $i&amp;lt;j$ otherwise&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>APUE/Chapter3: file and I/O</title>
      <link>/archive_posts/linux-file/</link>
      <pubDate>Fri, 14 Jan 2022 12:02:42 +0800</pubDate>
      <guid>/archive_posts/linux-file/</guid>
      <description>&lt;p&gt;The functions described in this chapter are often referred to as &lt;strong&gt;unbuffered I/O&lt;/strong&gt;(which each read or write invokes a system call in the kernel), in contrast to the standard I/O routines&lt;/p&gt;&#xA;&lt;h2 id=&#34;file-descriptors&#34;&gt;File Descriptors&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;To the kernel, all open files are referred to by &lt;strong&gt;file descriptors&lt;/strong&gt;. A file descriptor is a &lt;strong&gt;non-negative integer.&lt;/strong&gt; When we open an existing file or create a new file, the kernel returns a file descriptor to the process. When we want to read or write a file, we identify the file with the file descriptor that was returned by &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;creat&lt;/code&gt; as an argument to either read or write.&lt;/li&gt;&#xA;&lt;li&gt;By convention, UNIX System shells associate file descriptor &lt;strong&gt;0 with the standard input&lt;/strong&gt; of a process, file descriptor &lt;strong&gt;1 with the standard output&lt;/strong&gt;, and file descriptor &lt;strong&gt;2 with the standard error&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;File descriptors range from 0 through OPEN_MAX−1&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;open-and-openat&#34;&gt;&lt;code&gt;open&lt;/code&gt; and &lt;code&gt;openat&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;code&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#e5e5e5&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ee82ee&#34;&gt;char&lt;/span&gt; *path, &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt; oflag, ... &lt;span style=&#34;color:#0f0&#34;&gt;/* mode_t mode */&lt;/span&gt; );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;openat&lt;/span&gt;(&lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt; fd, &lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ee82ee&#34;&gt;char&lt;/span&gt; *path, &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt; oflag, ... &lt;span style=&#34;color:#0f0&#34;&gt;/* mode_t mode */&lt;/span&gt; );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;//Both return: file descriptor if OK, −1 on error&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;This function has a multitude of options, which are specified by the &lt;code&gt;oflag&lt;/code&gt; argument. This argument is formed by &lt;code&gt;ORing&lt;/code&gt; together one or more of the following constants from the&lt;code&gt;&amp;lt;fcntl.h&amp;gt;&lt;/code&gt;&#xA;header&lt;/p&gt;</description>
    </item>
    <item>
      <title>CLOG</title>
      <link>/archive_posts/clog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/archive_posts/clog/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;This chapter explains the content of &lt;code&gt;clog&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;clog&lt;/code&gt;(commit log), records the commit status of each transaction. The log&#xA;exists both in memory mannaged by &lt;code&gt;slru&lt;/code&gt; buffer and disk for durability. The&#xA;commit status can be the four kinds below:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#define TRANSACTION_STATUS_IN_PROGRESS&#x9;&#x9;0x00&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#define TRANSACTION_STATUS_COMMITTED&#x9;&#x9;0x01&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#define TRANSACTION_STATUS_ABORTED&#x9;&#x9;&#x9;0x02&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#define TRANSACTION_STATUS_SUB_COMMITTED&#x9;0x03&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;in-disk-representation&#34;&gt;In-Disk Representation&lt;/h2&gt;&#xA;&lt;p&gt;Thinking that the commit status of each transaction composites an array &lt;code&gt;clog[]&lt;/code&gt;&#xA;and &lt;code&gt;clog[xid]&lt;/code&gt; records the status, we can easily store the array to disk by the&#xA;&lt;code&gt;slru&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>cublasDgemm</title>
      <link>/archive_posts/cublasdgemmtutor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/archive_posts/cublasdgemmtutor/</guid>
      <description>&lt;h2 id=&#34;concept&#34;&gt;concept&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;cublasDgemm&lt;/code&gt; is a convenient function in cublas to compute the product of two matrix, while letter &amp;lsquo;D&amp;rsquo; in &lt;code&gt;cublasDgemm&lt;/code&gt; means &lt;code&gt;double&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Before reading this post, basic cuda functions like &lt;code&gt;cudaMalloc&lt;/code&gt; are what you are supposed to know.&lt;/p&gt;&#xA;&lt;h2 id=&#34;basic-use&#34;&gt;basic use&lt;/h2&gt;&#xA;&lt;p&gt;Definition of this function&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cublasStatus_t cublasDgemm(cublasHandle_t handle,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           cublasOperation_t transa, cublasOperation_t transb,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt; m, &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt; n, &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt; k,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ee82ee&#34;&gt;double&lt;/span&gt; *alpha,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ee82ee&#34;&gt;double&lt;/span&gt; *A, &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt; lda,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ee82ee&#34;&gt;double&lt;/span&gt; *B, &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt; ldb,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ee82ee&#34;&gt;double&lt;/span&gt; *beta,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#ee82ee&#34;&gt;double&lt;/span&gt; *C, &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt; ldc)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://docs.nvidia.com/cuda/cublas/index.html&#34;&gt;Basic information of parameters is show in this page&lt;/a&gt;. Simply put, $C = \alpha A \times B + \beta C $ .But it may remains confused for fresher. Below is an simple example.&lt;/p&gt;</description>
    </item>
    <item>
      <title>hash join</title>
      <link>/archive_posts/hashjoin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/archive_posts/hashjoin/</guid>
      <description>&lt;h2 id=&#34;high-level-view&#34;&gt;high level view&lt;/h2&gt;&#xA;&lt;p&gt;See &lt;a href=&#34;https://postgrespro.com/blog/pgsql/5969673&#34;&gt;Queries in PostgreSQL: 6. Hashing&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;one-pass-hash-join&#34;&gt;One-pass hash join&lt;/h3&gt;&#xA;&lt;p&gt;Note that join in PostgreSql, we scan the right relation first, which means that&#xA;the right relation is the &amp;ldquo;inner relation&amp;rdquo; and the left relation is the outer&#xA;one.&#xA;&lt;img src=&#34;https://mobilephone724.oss-cn-beijing.aliyuncs.com/blog/database/hashjoin/One-pass_hash_join.svg&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;two-pass-hash-join&#34;&gt;Two-pass hash join&lt;/h3&gt;&#xA;&lt;p&gt;Since we can&amp;rsquo;t allocate as much memory as we want, instead of building a hash&#xA;table of the entire table, PG split the tables to several &lt;code&gt;batches&lt;/code&gt; where all&#xA;tuples have the same hash value flag.&lt;/p&gt;</description>
    </item>
    <item>
      <title>pg_repack</title>
      <link>/archive_posts/pg_repack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/archive_posts/pg_repack/</guid>
      <description>&lt;h2 id=&#34;principle&#34;&gt;principle&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://reorg.github.io/pg_repack/&#34;&gt;pg_repack 1.5.0 &amp;ndash; Reorganize tables in PostgreSQL databases with minimal locks&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/reorg/pg_repack&#34;&gt;https://github.com/reorg/pg_repack&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;create a log table to record changes made to the original table&lt;/li&gt;&#xA;&lt;li&gt;add a trigger onto the original table, logging INSERTs, UPDATEs and DELETEs into our log table&lt;/li&gt;&#xA;&lt;li&gt;create a new table containing all the rows in the old table&lt;/li&gt;&#xA;&lt;li&gt;build indexes on this new table&lt;/li&gt;&#xA;&lt;li&gt;apply all changes which have accrued in the log table to the new table&lt;/li&gt;&#xA;&lt;li&gt;swap the tables, including indexes and toast tables, using the system catalogs&lt;/li&gt;&#xA;&lt;li&gt;drop the original table&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The basic idea is&lt;/p&gt;</description>
    </item>
    <item>
      <title>PGVECTOR AND VECTOR DATABASE</title>
      <link>/archive_posts/pgvector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/archive_posts/pgvector/</guid>
      <description>&lt;h2 id=&#34;序言&#34;&gt;序言&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;pgvector&lt;/code&gt;是一个向量搜索（根据近似度）的插件，用来加速AKNN（approximate nearest neighbor）。&#xA;&lt;code&gt;PASE&lt;/code&gt;中提到，向量ANN算法包括4类&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;tree-based algorithms&#xA;&lt;ol&gt;&#xA;&lt;li&gt;KD-Tree&lt;/li&gt;&#xA;&lt;li&gt;RTree&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;quantization-based algorithms&#xA;&lt;ol&gt;&#xA;&lt;li&gt;IVFFlat&lt;/li&gt;&#xA;&lt;li&gt;IVFADC&lt;/li&gt;&#xA;&lt;li&gt;IMI&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;graph based algorithms&#xA;&lt;ol&gt;&#xA;&lt;li&gt;HNSW&lt;/li&gt;&#xA;&lt;li&gt;NSG&lt;/li&gt;&#xA;&lt;li&gt;SSG&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;hash-base algorithms&#xA;&lt;ol&gt;&#xA;&lt;li&gt;LSH&#xA;&lt;code&gt;pgvector&lt;/code&gt; 包括两个算法，&lt;code&gt;IVFFlat&lt;/code&gt; 和 &lt;code&gt;HNSW&lt;/code&gt;，后续内容将以这两个算法的内容及其实现展开。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;ivfflat&#34;&gt;IVFFlat&lt;/h2&gt;&#xA;&lt;h3 id=&#34;概览&#34;&gt;概览&lt;/h3&gt;&#xA;&lt;p&gt;IVFFlat 算法主要包括以下几个步骤&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;索引构建阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用 &lt;code&gt;KMeans&lt;/code&gt; 将数据集划分成多个簇(cluster)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;查询阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过每个簇的中心点（向量是高维的点）获取N个最近的簇&lt;/li&gt;&#xA;&lt;li&gt;遍历这N个簇的所有点，从中找到最近的K个点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;算法介绍&#34;&gt;算法介绍&lt;/h3&gt;&#xA;&lt;h4 id=&#34;基础算法kmeans&#34;&gt;基础算法kmeans&lt;/h4&gt;&#xA;&lt;p&gt;reference &lt;a href=&#34;https://en.wikipedia.org/wiki/K-means_clustering&#34;&gt;k-means clustering - Wikipedia&lt;/a&gt;&#xA;算法目标：选取K个中心点，使得数据集中的所有点到其最近的中心点“距离”之和最近，以平方和距离为例：&lt;/p&gt;&#xA;&lt;p&gt;Given a set of observations $(x_1, x_2, \dots, x_n)$, where each observation is a $d$-dimensional real vector, k-means clustering aims to partition the $n$ observations into $k$ ($\leq n$) sets $S = {S_1, S_2, \dot, S_k}$ so as to minimize the within-cluster sum of squares (WCSS). Formally, the objective is to find:&#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mobilephone724/blog_pictures/master/kmeans_target.2024_02_12_1707672348.png&#34; alt=&#34;&#34;&gt;&#xA;算法过程：&#xA;&lt;strong&gt;我们可以很容易的证明目标函数是关于$S$的凸函数&lt;/strong&gt;&#xA;Given an initial set of $k$ means $m_1^{1}, \dots , m_k^{(1)}$ (see below), the algorithm proceeds by alternating between two steps:&lt;/p&gt;</description>
    </item>
    <item>
      <title>SLRU</title>
      <link>/archive_posts/slru/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/archive_posts/slru/</guid>
      <description>&lt;p&gt;本文主要为&lt;code&gt;SLRU&lt;/code&gt;本身的结构解读。&lt;/p&gt;&#xA;&lt;h3 id=&#34;简述&#34;&gt;简述&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;slru用来干什么？&#xA;&lt;ul&gt;&#xA;&lt;li&gt;slru是一个简单的buffer管理模块，simple slru&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;有了buffer pool manager，为什么还要slru？&#xA;&lt;ul&gt;&#xA;&lt;li&gt;bpm管理通用的page，比如heap，vm等&lt;/li&gt;&#xA;&lt;li&gt;slru最大的特点就是lru，非常适合处理xid这样，递增的信息。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;下面的代码分析基于pg15&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;存储结构&#34;&gt;存储结构&lt;/h3&gt;&#xA;&lt;p&gt;与bpm不同，通过slru管理的page，其文件大小固定，一个文件有32个page，一个page有8KB，故一个文件最大为256K。&lt;/p&gt;&#xA;&lt;p&gt;与WAL不同，WAL文件的大小在创建时就已经确定为16M，与WAL文件重用保持一致，而slru的文件，先在内存中产生相应的page，再会去落盘。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#define SLRU_PAGES_PER_SEGMENT&#x9;32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;内存slru&#34;&gt;内存slru&lt;/h4&gt;&#xA;&lt;h5 id=&#34;全局-buffer-数组&#34;&gt;全局 buffer 数组&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;struct&lt;/span&gt; SlruSharedData&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;LWLock&#x9;   *ControlLock;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#0f0&#34;&gt;/* Number of buffers managed by this SLRU structure */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;&#x9;&#x9;&#x9;num_slots;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#0f0&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&#x9; * Arrays holding info for each buffer slot.  Page number is undefined&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&#x9; * when status is EMPTY, as is page_lru_count.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&#x9; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ee82ee&#34;&gt;char&lt;/span&gt;&#x9;  **page_buffer;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;SlruPageStatus *page_status;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ee82ee&#34;&gt;bool&lt;/span&gt;&#x9;   *page_dirty;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;&#x9;&#x9;   *page_number;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;&#x9;&#x9;   *page_lru_count;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;LWLockPadded *buffer_locks;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    XLogRecPtr *group_lsn;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;&#x9;&#x9;&#x9;lsn_groups_per_page;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#0f0&#34;&gt;/*----------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&#x9; * We mark a page &amp;#34;most recently used&amp;#34; by setting&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&#x9; *&#x9;&#x9;page_lru_count[slotno] = ++cur_lru_count;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&#x9; * The oldest page is therefore the one with the highest value of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&#x9; *&#x9;&#x9;cur_lru_count - page_lru_count[slotno]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&#x9; * The counts will eventually wrap around, but this calculation still&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&#x9; * works as long as no page&amp;#39;s age exceeds INT_MAX counts.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&#x9; *----------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&#x9; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;&#x9;&#x9;&#x9;cur_lru_count;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} SlruSharedData;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从内存结构上看，是一个数组，每个元素代表一个page。同时，记录这些page的使用次数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WAL基础</title>
      <link>/archive_posts/wal-basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/archive_posts/wal-basic/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;From &lt;code&gt;access/transam/README&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;write-ahead-log-coding&#34;&gt;Write-Ahead Log Coding&lt;/h2&gt;&#xA;&lt;p&gt;基本思想，日志在数据页前落盘&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;LSN&lt;/code&gt;：刷脏前检查&lt;code&gt;LSN&lt;/code&gt;对应的日志已经落盘&#xA;&lt;ol&gt;&#xA;&lt;li&gt;优势：仅在必要的时候等待&lt;code&gt;XLOG&lt;/code&gt;的&lt;code&gt;IO&lt;/code&gt;。（异步&lt;code&gt;IO&lt;/code&gt;）&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;LSN&lt;/code&gt;的检查模块只用在 buffer manager 中实现&lt;/li&gt;&#xA;&lt;li&gt;在WAL回放时，避免相同的日志被重复回放（可重入）。（TODO：full page write是否在另一个层面上保证了可重入）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;WAL 包含一个（或一小组）页的&lt;strong&gt;增量更新&lt;/strong&gt;的重做信息。&#xA;&lt;ol&gt;&#xA;&lt;li&gt;依赖文件系统和硬件的原子写，不可靠！&lt;/li&gt;&#xA;&lt;li&gt;checkpoint，checkpointer后的第一次写全页。通过 checkpoint 留下的 &lt;code&gt;LSN &lt;/code&gt; 来判断是否为第一次写&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;写下WAL日志的逻辑为&#xA;&lt;ol&gt;&#xA;&lt;li&gt;pin and exclusive-lock the shared buffer&lt;/li&gt;&#xA;&lt;li&gt;START_CRIT_SECTION，发生错误时确保整个数据库能立即重启&lt;/li&gt;&#xA;&lt;li&gt;在shared buffer上，进行对应的修改&lt;/li&gt;&#xA;&lt;li&gt;标记为脏页，&#xA;&lt;ol&gt;&#xA;&lt;li&gt;必须在WAL日志写入前完成（TODO，为什么？&lt;code&gt;SyncOneBuffer&lt;/code&gt;）&lt;/li&gt;&#xA;&lt;li&gt;只有在要写WAL时，才能标记脏页（TODO，为什么？）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;使用&lt;code&gt;XLogBeginInsert&lt;/code&gt; 和 &lt;code&gt;XLogRegister*&lt;/code&gt; 函数构建WAL，使用返回的&lt;code&gt;LSN&lt;/code&gt;来更新&lt;code&gt;page&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;END_CRIT_SECTION，退出&lt;/li&gt;&#xA;&lt;li&gt;解锁和unpin （注意顺序）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;一些复杂的操作，需要原子地写下一串WAL记录，但中间状态必须自洽(self-consistent)。这样在回放wal日志时，如果中断，系统还能够正常运行。注意：此时相当于事务回滚，但是其部分更改已经落盘。举例：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在btree索引中，页的分裂分为两步（1）分配一个新页（2）在上一层的页(parent page)中新插入一条数据。&lt;/li&gt;&#xA;&lt;li&gt;但是因为锁，这会形成两个独立的WAL日志。在回放WAL日志时&#xA;&lt;ul&gt;&#xA;&lt;li&gt;回放第（1）个日志：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分配一个新页，将元组移动进去&lt;/li&gt;&#xA;&lt;li&gt;设置标记位，表示上一层的页没有更新&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;回放第（2）个日志：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在上一层的页中新插入一条数据&lt;/li&gt;&#xA;&lt;li&gt;清除第（1）个日志中的标记位&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;标志位通常情况下不可见，因为对 child page 的修改时持有的锁，在两个操作完成后才会释放。&lt;/li&gt;&#xA;&lt;li&gt;仅在写下第（2）个日志前，数据库恰好崩溃，标志位才会被感知。（该标志位应该没有MVCC，否则会在事务层屏蔽）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;搜索时，不管这个中间状态&lt;/li&gt;&#xA;&lt;li&gt;插入时，如果发现这个中间状态，先在上一层的页插入对应key，以修复这个“崩溃”状态，再继续插入&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>WAL日志的插入</title>
      <link>/archive_posts/wal-insert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/archive_posts/wal-insert/</guid>
      <description>&lt;h2 id=&#34;接口函数&#34;&gt;接口函数&lt;/h2&gt;&#xA;&lt;p&gt;一个WAL记录包含&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;WAL记录类型。（TODO不同的修改有不同的记录方式？）&lt;/li&gt;&#xA;&lt;li&gt;这个页的修改方式&lt;/li&gt;&#xA;&lt;li&gt;被修改的页的信息。被修改的页通过一个唯一ID标识，也可以有更多的关联数据（&amp;ldquo;record-specific data associated with the block&amp;rdquo;）。如果要写full page，就没有关联数据&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;构建一个wal记录包含5个核心函数&#34;&gt;构建一个WAL记录包含5个核心函数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;void XLogBeginInsert(void)&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;初始化相关状态&lt;/li&gt;&#xA;&lt;li&gt;如果当前无法构建WAL日志（例如在recovery模式），则报错&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;void XLogRegisterBuffer(uint8 block_id, Buffer buf, uint8 flags);&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;增加了数据块的信息；注册一个buffer的引用，相当于上述WAL日志的第三部分&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;block_id is an arbitrary number used to identify this page reference in the redo routine&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;在redo阶段，可以根据这些信息找到需要redo的page&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    regbuf = &amp;amp;registered_buffers[block_id];&#xA;    /*&#xA;     * Returns the relfilenode, fork number and block number associated with&#xA;     * a buffer&#xA;     */&#xA;    BufferGetTag(buffer, &amp;amp;regbuf-&amp;gt;rnode, &amp;amp;regbuf-&amp;gt;forkno, &amp;amp;regbuf-&amp;gt;block);&#xA;    regbuf-&amp;gt;page = BufferGetPage(buffer);&#xA;    regbuf-&amp;gt;flags = flags;&#xA;    regbuf-&amp;gt;rdata_tail = (XLogRecData *) &amp;amp;regbuf-&amp;gt;rdata_head;&#xA;    regbuf-&amp;gt;rdata_len = 0;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;registered_buffer的结构&lt;/p&gt;</description>
    </item>
    <item>
      <title>ZERO TO RSA</title>
      <link>/archive_posts/zero2rsa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/archive_posts/zero2rsa/</guid>
      <description>&lt;h2 id=&#34;从0证明rsa&#34;&gt;从0证明RSA&lt;/h2&gt;&#xA;&lt;p&gt;RSA 算法（即一个非对称加密算法）除了应用非常广泛外，其特性也非常吸引人（起码非常吸引我）。我在网上找了很多关于RSA的证明，要么不够详细（例如缺失对前置定理的证明），要么需要引出较多复杂的数论概念。作者本身水平不高，试图绕过这些复杂的概念，从初等数学的开始，完备地证明RSA。&lt;/p&gt;&#xA;&lt;p&gt;关于RSA的背景知识可能很多，可以慢慢阅读，我在此尝试从初等数学开始证明。这些背景知识的证明有一定的顺序，如果读者发现某个证明看不懂，可以向前翻阅。&lt;/p&gt;&#xA;&lt;p&gt;参考的文章如下：（因为参考的文章太多，大概率不全）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86&#34;&gt;费马小定理&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86&#34;&gt;中国剩余定理&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html&#34;&gt;阮一峰的博客——RSA算法原理（一）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html&#34;&gt;阮一峰的博客——RSA算法原理（二）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/35060143&#34;&gt;初等数论笔记Part 1： 欧拉定理&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/100587745&#34;&gt;算法学习笔记(9)：逆元&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;费马小定理&#34;&gt;费马小定理&lt;/h2&gt;&#xA;&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;&#xA;&lt;p&gt;如果 $p$ 是质数且 $\mathrm{gcd}(a,p)=1$ , 那么 $a^{p-1}\equiv 1\ (\mathrm{mod}\ p)$&lt;/p&gt;&#xA;&lt;p&gt;在证明该定理前，先证明一个简单的引理&lt;/p&gt;&#xA;&lt;h3 id=&#34;引理1&#34;&gt;引理1&lt;/h3&gt;&#xA;&lt;p&gt;如果 $p$ 是质数，且 $\mathrm{gcd}(a,p)=1$ , 那么&lt;/p&gt;&#xA;&lt;p&gt;$$&#xA;\lbrace ka \ \mathrm{mod}\ p | k = \lbrace 1,2,&amp;hellip;,p -1 \rbrace \rbrace= \lbrace 1,2,3,&amp;hellip;,p-1 \rbrace&#xA;$$&lt;/p&gt;&#xA;&lt;p&gt;即二者存在一对一的关系。由于这两个集合的元素个数相同，所以只要证明左侧集合没有重复元素即可&lt;/p&gt;&#xA;&lt;p&gt;证明：假设存在 $k_1$ 和 $k_2$ 满足 $1 \leq k_1 &amp;lt; k_2 \leq p-1$ ，且 $k_1a\ \mathrm{mod}\ p = k_2a\ \mathrm{mod}\ p$ . 那么可知&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
